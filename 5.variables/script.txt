DIAPO
-------------
-Utilizar nombres de variables significativas y pronunciables.
Bad
const yyyymmdstr = moment().format("YYYY/MM/DD");
Good:
const currentDate = moment().format("YYYY/MM/DD");

DIAPO
-------------
-Utiliza el mismo vocabulario para el mismo tipo de variable.
Bad:

getUserInfo();
getClientData();
getCustomerRecord();
Good:

getUser();

DIAPO
-------------
-Utilizar nombres de búsqueda
 buddy.js => puede ayudar!

 Bad:

// What the heck is 86400000 for?
setTimeout(blastOff, 86400000);
Good:

// Declare them as capitalized named constants.
const MILLISECONDS_IN_A_DAY = 86400000;

setTimeout(blastOff, MILLISECONDS_IN_A_DAY);

DIAPO
-------------
-Utilizar variables explicativas.
Bad:

const address = "One Infinite Loop, Cupertino 95014";
const cityZipCodeRegex = /^[^,\\]+[,\\\s]+(.+?)\s*(\d{5})?$/;
saveCityZipCode(
  address.match(cityZipCodeRegex)[1],
  address.match(cityZipCodeRegex)[2]
);
Good:

const address = "One Infinite Loop, Cupertino 95014";
const cityZipCodeRegex = /^[^,\\]+[,\\\s]+(.+?)\s*(\d{5})?$/;
const [, city, zipCode] = address.match(cityZipCodeRegex) || [];
saveCityZipCode(city, zipCode);

DIAPO
-------------
-Evitar mapeo mental

Explicit is better than implicit.

Bad:

const locations = ["Austin", "New York", "San Francisco"];
locations.forEach(l => {
  doStuff();
  doSomeOtherStuff();
  // ...
  // ...
  // ...
  // Wait, what is `l` for again?
  dispatch(l);
});
Good:

const locations = ["Austin", "New York", "San Francisco"];
locations.forEach(location => {
  doStuff();
  doSomeOtherStuff();
  // ...
  // ...
  // ...
  dispatch(location);
});

DIAPO
-------------
-No agregar contexto innecesario.
If your class/object name tells you something, don't repeat that in your variable name.

Bad:

const Car = {
  carMake: "Honda",
  carModel: "Accord",
  carColor: "Blue"
};

function paintCar(car) {
  car.carColor = "Red";
}
Good:

const Car = {
  make: "Honda",
  model: "Accord",
  color: "Blue"
};

function paintCar(car) {
  car.color = "Red";
}


DIAPO
-------------
-Utilizar argumentos por defecto en lugar de cortocircuitos o condicionales.
Bad:

function getCompany(name) {
  const company = name || "Default Company";
  // ...
}
Good:

function getCompany(name = 'Default Company') {
  // ...
}

DIAPO
-------
Usar const para todas las referencias; evitar el uso de var
Si se deben reasignar referencias, usar let en lugar de var
Tanto let como const son block-scoped y previenen el hoisting.
Una variable por declaración. Cada declaración de variable local declara solo una variable: declaraciones como let a = 1, b = 2; no se usan
Declarado cuando sea necesario, inicializado lo antes posible.

DIAPO
------
Qué es el hoisting

DIAPO
------
Qué es block-scoped

DIAPO
------

